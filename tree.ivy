#lang ivy1.7

#TODO: Model certificates

module total_order(t) = {
    property [Transitivity] X:t < Y & Y < Z -> X < Z  
    property [antisymmetry] ~(X:t < Y & Y < X)
    property [totality] X:t < Y | X=Y | Y < X
}

isolate heights = {
    type t
    individual min:t

    specification {
        instantiate total_order(t)
        property [minimum] min < H | min = H
    }
}

isolate tree = {
    type block

    individual genesis:block

    #assign to every block its block height
    function block_height(B:block):heights.t
    #assign to every block a predecessor
    relation prev(B:block,C:block)
    relation proposed(B:block)

    relation ancestor(B:block, C:block)

    #init
    after init {
        prev(B,C) := false;
        prev(genesis,genesis) := true;
        proposed(B) := B = genesis;
        block_height(B) := heights.min;
        ancestor(B,C) := B=C;
    }

    action propose(b_new:block,b_prev:block,h:heights.t) = {
        #these are assume, not require, to avoid repeting them in hotstuff
        assume ~proposed(b_new);
        assume proposed(b_prev);
        assume block_height(b_prev) < h;

        #create tree
        prev(b_new,b_prev) := true;
        block_height(b_new) := h;

        #mark as proposed
        proposed(b_new) := true;

        ancestor(B,b_new) := ancestor(B,b_prev) | B=b_prev;
    }

    export propose

    private {
        invariant prev(B,C) & prev(B,D) -> C=D
        invariant prev(B,C) & prev(C,B) -> C=genesis
        invariant prev(genesis,genesis)
        invariant ~proposed(B) -> ~prev(B,C)
        invariant proposed(B) & prev(B,C) -> proposed(C)
        invariant proposed(B) -> ancestor(genesis,B)
        #invariant proposed(B) -> exists D. prev(B,D)
        #invariant prev(B,C) -> exists D. prev(B,D)
        invariant prev(B,C) -> ancestor(C,B)
        invariant ancestor(B,C) & ~proposed(B) -> B=C
        invariant ancestor(B,C) & ancestor(C,B) -> B=C
        invariant ancestor(B,C) & ancestor(C,D) -> ancestor(B,D)
        invariant prev(C,B) -> ancestor(B,C)
        invariant prev(D,C) & ancestor(B,C) -> ancestor(B,D)
        #invariant ancestor(B,C) & B~=C -> exists D. prev(C,D) & ancestor(B,D)
    }

} with heights

isolate hotstuff = {
    type node
    type quorum

    relation is_good(N:node) # should be used only in the proof!

    relation member(N:node, Q:quorum)
    axiom forall Q1,Q2. exists N. is_good(N) & member(N, Q1) & member(N, Q2)

    #this shows that node N signed block B at height H
    relation voted(N:node,B:tree.block)
    #assign for every node its lock
    function lock(N:node):tree.block

    relation certified(B:tree.block)
    definition certified(B) = B=tree.genesis | exists Q. forall N. member(N,Q) -> voted(N,B)

    relation just(B:tree.block, C:tree.block)

    #init
    after init {
        voted(N,B) := false;
        lock(N) := tree.genesis;
        just(B,C) := B = C & B = tree.genesis;
    }

    action propose(b_new:tree.block,b_prev:tree.block,h:heights.t,j:tree.block) = {
        require just(b_prev,j);

        #create tree
        call tree.propose(b_new,b_prev,h);

        #mark as proposed and set just
        if certified(b_prev) {
            just(b_new,b_prev) := true;
        } else {
            just(b_new,j) := true;
        }
    }

    action vote(n:node, h:heights.t, b:tree.block, j:tree.block, jj:tree.block) = {
        require tree.proposed(b);
        require just(b,j) & just(j,jj);
        
        #RULE 1 good nodes will only vote for b if they have not yet voted at larger height
        require is_good(n) & voted(n,B) -> tree.block_height(B) < tree.block_height(b);

        #RULE 2
        require is_good(n) -> tree.ancestor(lock(n),b) | tree.block_height(lock(n)) < tree.block_height(j);

        voted(n,b) := true;

        if tree.block_height(lock(n)) < tree.block_height(jj) {
            lock(n) := jj;
        }
    }

    export propose
    export vote

    relation confirm(B:tree.block,C:tree.block,D:tree.block)
    definition confirm(B,C,D) = tree.prev(C,B) & just(C,B) & tree.prev(D,C) & just(D,C) & certified(D)


    private {
        invariant tree.prev(tree.genesis,tree.genesis)
        invariant tree.prev(C,B) -> tree.ancestor(B,C)
        invariant tree.prev(D,C) & tree.ancestor(B,C) -> tree.ancestor(B,D)
        invariant ~tree.proposed(B) -> ~tree.prev(B,C)
        invariant ~tree.proposed(B) -> tree.block_height(B) = heights.min
        invariant tree.prev(B,C) & tree.prev(B,D) -> C=D
        invariant tree.prev(B,C) & tree.prev(C,B) -> C=tree.genesis
        invariant tree.prev(B,C) & B ~= C -> tree.block_height(C) < tree.block_height(B)
        invariant tree.proposed(B) & tree.prev(B,C) -> tree.proposed(C)
        invariant tree.proposed(B) -> tree.ancestor(tree.genesis,B)
        invariant tree.prev(B,C) -> tree.ancestor(C,B)
        invariant tree.ancestor(B,C) -> tree.block_height(B) <= tree.block_height(C)
        invariant tree.ancestor(B,C) & ~tree.proposed(B) -> B=C
        invariant tree.ancestor(B,C) & tree.ancestor(C,B) -> B=C
        invariant tree.ancestor(B,C) & tree.ancestor(C,D) -> tree.ancestor(B,D)
        
        invariant lock(N) = B -> certified(B)
        invariant voted(N,B) -> tree.proposed(B)
        invariant voted(N,B) & just(B,J) & just(J,JJ) -> lock(N) = JJ | tree.block_height(JJ) < tree.block_height(lock(N)) 
        invariant just(B,C) -> certified(C)
        invariant just(tree.genesis, tree.genesis)
        invariant just(B,C) & just(C,B) -> B = tree.genesis 
        invariant just(B,C) & B ~= C -> tree.block_height(C) < tree.block_height(B)
        
        invariant confirm(B,C,D) & certified(E) & tree.block_height(B) < tree.block_height(E) -> tree.ancestor(B,E)
    }


} with heights, tree




